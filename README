This is the project for the backend of VMRP (fullcost-based multimodal route planner).
In order to use tha backend you have to do following steps first:
- download python
- import all python packages
- set up a local otp (open trip planner) instance
- change values of the needed Tier and DB API keys to own keys
- IMPORTANT: if you want to run the project, change constant ROOT_DIR in config/definitions to variant 2
by commenting VARIANT 1 and uncommenting VARIANT 2. VARIANT 1 is needed if you want to build an .exe file

This backend-server is using the flask library to run a local server and can be reached by sending a http/get request to
the REST-API. To run the backend-server run the script rest_api_2.py or find the project folder "VMRP_Prototyp" and
double-click on "VMRP_backend.bat".

For the calculation of full-costs the backend is using 3 simple csv files located in the "costs_db" directory of this
project. If values need to be changed, simply change them in the csv files and save them.

Following routes can be planned in Munich with this software:
- private vehicles:
    private car, e-car, moped, e-moped, bicycle, e-bicycle
- walking
- sharing vehicles:
    Emmy (e-moped sharing)
    Tier (only! e-scooter sharing)
    Call a Bike (bike sharing)
    ShareNow (car sharing)
    Flinkster (car sharing)
- public transit (MVV Area)

APIs used:
-> The locations of sharing vehicles are requested through API-requests with scripts in the directory
"mobility_controllers/mobility_api/sharing".
-> Routes with public transit are planned with MVG API ("mobility_controllers/mobility_api/public_transport")
-> for all other routes (private vehicles, sharing, walking) OTP is used for route planning
-> for geocoding, a Nominatim geocoder is used ("engines/geocoder")

General creation of routes:
currently in order to create a route following steps are necessary
- for private vehicles:
    i. create a vehicle object of either ot the classes that implement the abstract class Vehicle
    (IndividualVehicle, SharingVehicle or UrbanPublicVehicle) with all necessary parameters
    ii. create a trip object of the class SimpleOtpTrip with all necessary parametes
(IndividualVehicle, SharingVehicle or UrbanPublicVehicle) with all necessary parameters
- for sharing or public transit:
    i. create a trip object of either of the three classes left that implement the abstract class Trip
    (SharingTrip, PublicTransportTrip, IntermodalTrip)

in both cases, you can now use get-methods to get all calculated data like costs, segments, duration, distance of the trip
and these informations are also available via get-methods for each segment of the trip (e.g. trip_emmy.get_segmets().get_costs())





